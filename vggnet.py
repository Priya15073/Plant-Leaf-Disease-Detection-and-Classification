# -*- coding: utf-8 -*-
"""VGGNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/164eVKuu8K_3O9wOJOk-RxNOwJVNo3ond
"""

#Priya Rajpurohit 2015073
#Sakshi Saini 2017092

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
from zipfile import ZipFile
import os
import cv2
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
import pickle
import h5py
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import VGG16

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive1 = GoogleDrive(gauth)

link = 'https://drive.google.com/open?id=10fFInHmGZ5PsbMTRb_7EuhJcGNHisjCi'
fluff, id = link.split('=')

downloaded = drive1.CreateFile({'id':id}) 
downloaded.GetContentFile('Segmented.zip')



with ZipFile('/content/Segmented.zip', 'r') as zipObj:
   zipObj.extractall()

path = '/content/Segmented/'
images=[]
lable = 1
labels = []
for r, d, f in os.walk(path):
    for folder in d:
        
        for r1, d1, f1 in os.walk(os.path.join(r, folder)):
          for file in f1:
            # print(file)
            images.append( cv2.imread(os.path.join(r1, file) ))
            labels.append(lable)

          lable = lable +1

images = np.array(images)

X_train, X_test, y_train, y_test = train_test_split( images[:10000], labels[:10000], test_size=0.3, random_state=42 , shuffle=True)

model = VGG16( weights='imagenet', include_top=False )

features = []
for image in X_train:

  image = cv2.resize(image , (224, 224) )
  image = preprocess_input(image)
  image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))

  feature = model.predict(image)
  features.append(feature)

featuresTest = []
for image in X_test:

  image = cv2.resize(image , (224, 224) )
  image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))
  image = preprocess_input(image)
  feature = model.predict(image)
  featuresTest.append(feature)

features = np.array(features)
features = features.reshape(7000, 25088)

clf = RandomForestClassifier()
clf.fit(features,  y_train)

featuresTest = np.array(featuresTest)
featuresTest = featuresTest.reshape(3000, 25088)

# accuracy = clf.score(featuresTest,y_test)
# accuracy *= 100
# print(accuracy)

filename = 'rf_model_segmented.sav'
pickle.dump(clf, open(filename, 'wb'))

clfSVM = svm.SVC()
clfSVM.fit(features, y_train)

accuracy = clfSVM.score(featuresTest,y_test)
accuracy *= 100
print(accuracy)

filename = 'svm_model_final.sav'
pickle.dump(clfSVM, open(filename, 'wb'))

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd 
y = pd.read_csv("/content/drive/My Drive/SML/labels.csv")

### For Binary Classification
n = featuresTest.shape[0]

healthy = []
diseased = []

score = 0
for i in range(n):
  image = featuresTest[i].reshape(1, -1)
  pred = clfSVM.predict(image)
  actual = y_test[i]

  x1, boole = testActual(pred, actual)
  if(boole):
    score +=1

  if( x1 == 'healthy' ):
    healthy.append(image)
  else:
    diseased.append(image)
accuracy = score/n
print(accuracy)

def testActual(pred, actual):
  
  l1 = y['label_name'][pred[0] ]
  l2 = y['label_name'][actual]
  # print(l1,l2)

  if 'healthy' in l1:
    x1='healthy'
  else:
    x1='diseased'
  if 'healthy' in l2:
    x2='healthy'
  else:
    x2='diseased'

  if( x1 == x2 ):
    return (x1, True)

  return (x1, False)

### For Disease Classification
n = featuresTest.shape[0]

score = 0
for i in range(n):
  image = featuresTest[i].reshape(1, -1)
  pred = clfSVM.predict(image)
  actual = y_test[i]

  x1, boole = testActual(pred, actual)
  if(boole):
    score +=1

  if( x1 == 'healthy' ):
    healthy.append(image)
  else:
    diseased.append(image)
accuracy = score/n
print(accuracy)

