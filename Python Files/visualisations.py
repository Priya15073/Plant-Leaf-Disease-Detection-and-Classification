# -*- coding: utf-8 -*-
"""Visualisations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rtZM7DPGdp1pdA3spScGRkkUcqUtPfK7
"""

#Priya Rajpurohit 2015073
#Sakshi Saini 2017092

import tensorflow_datasets as tfds
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

import keras
import keras.backend as K

from keras.models import Model
import cv2 
import numpy as np 
from keras import backend as K 
from keras.utils import np_utils

import math 
from sklearn.model_selection import train_test_split

ds, ds_info = tfds.load("plant_village", split=tfds.Split.TRAIN, batch_size=-1 , with_info=True )

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd 
y = pd.read_csv("/content/drive/My Drive/SML/labels.csv")

ds = tfds.as_numpy(ds)
images, labels = ds["image"], ds["label"]

index = 10
image = images[index]

image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image)
plt.title(y['label_name'][labels[index]])
plt.show()

## Colored images 

fig = plt.figure(figsize=(8, 8))
columns = 4
rows = 3

for i in range(1, columns*rows +1):
    image = images[i]
    fig.add_subplot(rows, columns, i)
    plt.title(y['label_name'][labels[i]])
    plt.axis('off')
    plt.imshow(image)
plt.show()

## Gray Scale images 

fig = plt.figure(figsize=(8, 8))
columns = 2
rows = 2

for i in range(1, columns*rows +1):
    image = images[i]
    image  = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
    fig.add_subplot(rows, columns, i)
    plt.title(y['label_name'][labels[i]])
    plt.axis('off')
    plt.imshow(image, cmap = "gray")
plt.show()

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive1 = GoogleDrive(gauth)

link = 'https://drive.google.com/open?id=10fFInHmGZ5PsbMTRb_7EuhJcGNHisjCi'
fluff, id = link.split('=')

downloaded = drive1.CreateFile({'id':id}) 
downloaded.GetContentFile('Segmented.zip')

from zipfile import ZipFile

with ZipFile('/content/Segmented.zip', 'r') as zipObj:
   zipObj.extractall()

import os
path = '/content/Segmented/'
images=[]
lable = 1
labels = []
for r, d, f in os.walk(path):
    for folder in d:
        
        for r1, d1, f1 in os.walk(os.path.join(r, folder)):
          for file in f1:
            # print(file)
            images.append( cv2.imread(os.path.join(r1, file) ))
            labels.append(lable)

          lable = lable +1

### Segmented 
from random import randint
fig = plt.figure(figsize=(8, 8))
columns = 2
rows = 2

n = len(images)

for i in range(1, columns*rows +1):
    value = randint(0, n)
    image = images[value]
    fig.add_subplot(rows, columns, i)
    plt.title(y['label_name'][labels[value]])
    plt.axis('off')
    plt.imshow(image)
plt.show()

## extracting the channel colors 

subImages = images[:1000]

redDist = []
greenDist = []
blueDist = []
avgDist = []
n = subImages.shape[0]

for i in range(n):

  image = cv2.cvtColor(images[i], cv2.COLOR_BGR2RGB)

  redDist.append( np.mean( image[:, :, 0] ))
  blueDist.append(np.mean( image[:, :, 1] ))
  greenDist.append(np.mean(image[:, :, 2] ))
  avgDist.append(np.mean(image))

import plotly.figure_factory as ff

redDist = np.array(redDist)
redDist.shape

figure = ff.create_distplot( [redDist] , group_labels=["Red"], colors=["red"])

figure.update_layout(template="simple_white")
figure.update_layout(title_text="Red Channel Distribution")

figure.data[0].marker.line.width = 0.5
figure

blueDist = np.array(blueDist)

figure = ff.create_distplot( [blueDist] , group_labels=["Blue"], colors=["blue"])

figure.update_layout(template="simple_white")
figure.update_layout(title_text="Blue Channel Distribution")

figure.data[0].marker.line.width = 0.5
figure

greenDist = np.array(greenDist)

figure = ff.create_distplot( [greenDist] , group_labels=["Green"], colors=["green"])

figure.update_layout(template="simple_white")
figure.update_layout(title_text="Green Channel Distribution")

figure.data[0].marker.line.width = 0.5
figure

figure = ff.create_distplot( [redDist, blueDist, greenDist] , group_labels=["Red", "Blue","Green"], colors=["red","blue","green"])

figure.update_layout(template="simple_white")
figure.update_layout(title_text="Channel Distribution")

figure.data[0].marker.line.width = 0.5
figure



greenDist = np.array(avgDist)

figure = ff.create_distplot( [avgDist] , group_labels=["Average"], colors=["orange"])

figure.update_layout(template="simple_white")
figure.update_layout(title_text="Average Channel Distribution")

figure.data[0].marker.line.width = 0.5
figure

